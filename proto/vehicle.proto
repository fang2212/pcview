syntax = "proto3";
package perception;
message Vehicle {
    enum LightType { // 位置
        kLightDay = 0;
        kLightNight = 1;
    }
    message Rect2f {
        float x = 1;
        float y = 2;
        float w = 3;
        float h = 4;
    }
    message Scene {
        LightType type = 1;
        int32 cnt = 2;
    }
    message VehicleMeasureRes {
        Rect2f det_rect = 1;              // CNN检测框
        Rect2f reg_rect = 2;              // CNN回归框
        Rect2f track_rect = 3;            // 跟踪框
        Rect2f smooth_rect = 4;           // 光流跟踪框
        float confidence = 5;                     // 检测置信度
        int32 hit_type = 6;                       // 检测分类（0车辆，1行人，2两轮车)
        int32 vehicle_class = 7;                  // 目标车车型分类, 0-Negative, 1-Car, 2-MiniBus, 3-Bus, 4-Truck, 5-Special, 6无意义
        int32 vehicle_id = 8;                     // 目标车id
        int32 track_cnt = 9;                      // 目标车被跟踪的次数
        float vehicle_width = 10;                 // 目标车的真实宽度
        float vehicle_height = 11;                // 目标车的真实高度
        float longitude_dist = 12;                // 目标车中心到自车车头/相机平面的垂直距离
        float lateral_dist = 13;                  // 目标车车尾中点到自车纵轴线的垂直距离
        float rel_lateral_speed = 14;             // 目标车辆与自车的横向相对车速
        float rel_speed = 15;                     // 两车相对速度； 两车距离接近为负，反之为正
        float speed_acc = 16;                     // 两车相对加速度
        float headway = 17;                       // 时距=距离/自车速度
        float ttc = 18;                           // 碰撞时间
        bool on_route = 19;                       // 目标车是否在本车的行进路线上
        bool is_still = 20;                       // 目标车是否绝对静止
        bool rel_slowdown = 21;                   // 相对距离是否减少
        bool is_crucial = 22;                     // 目标车是否为关键车
        bool is_second_crucial = 23;              // 目标车是否为次关键车
        int32 pose_class = 24;                    // 目标车辆姿态, 0-Tail, 1-Head, 2-BoradSide
        float angle_center = 25;                  // 自车与车辆中心夹角
        float angle_left = 26;                    // 自车与车辆左边缘的夹角
        float angle_right = 27;                   // 自车与车辆右边缘的夹角
        int32 trace_status = 28;                  // 车辆目标检测状态, 0-目标初始检测未达到稳定跟踪, 1-目标稳定跟踪但未稳定检测, 2-目标稳定检测且跟踪
    }

    message VehicleWarning {                      // 告警信息
        int32 vehicle_id = 1;                     // 目标车id
        float headway = 2;                        // 两车时距=距离/自车速度
        int32 warning_level = 3;                  // 告警级别， -1-NoCar, 0-alert none, 1-hmw level 1, 2-hmw level
        int32 fcw = 4;                            // FCW前向碰撞告警，第0位代表状态，第1位代表状态change
        int32 ufcw = 5;                           // UFCW前向碰撞告警，第0位代表状态，第1位代表状态change
        int32 headway_warning = 6;                // HWD时距告警，第0位代表状态，第1位代表状态change
        int32 vb_warning = 7;                     // VB虚拟保险杠告警,第0位代表状态，第1位代表状态change
        int32 sag_warning = 8;                    // SAG前车后启告警,第0位代表状态，第1位代表状态change
    }

    message VehicleState {
        int32 fcw_state = 1;                      // 0:unavailable state, 1:off, 2:standby, 3:active, 7:not available
        int32 hmw_state = 2;                      // 0:unavailable state, 1:off, 2:standby, 3:active, 7:not available
    }

	uint64 frame_id = 1;                          // 帧ID
	uint64 timestamp = 2;                         // 时戳
	repeated VehicleMeasureRes vehicle_list = 3;  // 车辆信息
    VehicleWarning vehicle_warning = 4;           // 告警信息
    VehicleState state = 5;            

}
